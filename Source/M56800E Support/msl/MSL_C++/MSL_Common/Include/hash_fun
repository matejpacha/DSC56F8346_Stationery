/* MSL
 * Copyright © 1995-2007 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2008/10/31 15:58:26 $
 * $Revision: 1.24 $
 */

// hash_fun

#ifndef _HASH_FUN
#define _HASH_FUN

/*
	WARNING - WARNING - WARNING

	This header is NON-STANDARD

	The classes herein are offered as extensions to the C++ standard.
	They are marked as such by the namespace Metrowerks.
*/

/*  hash_fun synopsis

namespace Metrowerks
{

template <class T>
struct hash
	: std::unary_function<T, std::size_t>
{
	std::size_t operator()(const T& key) const;
};

template <class charT, class traits, class Allocator>
struct hash<std::basic_string<charT, traits, Allocator> >
	: std::unary_function<std::basic_string<charT, traits, Allocator>, std::size_t>
{
	typedef std::basic_string<charT, traits, Allocator> string_type;
	std::size_t operator()(const string_type& key) const;
};

template <>
struct hash<const char*>
	: std::unary_function<const char*, std::size_t>
{
	typedef const char* string_type;
	std::size_t operator()(string_type key) const;
};

}  // Metrowerks
*/

#include <mslconfig>
#include <functional>

#ifndef RC_INVOKED

#ifdef __MWERKS__
#pragma options align=native
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif  // _MSL_FORCE_ENUMS_ALWAYS_INT

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif  // _MSL_FORCE_ENABLE_BOOL_SUPPORT

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace Metrowerks {
#else
	#ifndef Metrowerks
		#define Metrowerks
	#endif
#endif  // _MSL_NO_CPP_NAMESPACE

using _STD_TR1::hash;

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace Metrowerks
#endif

_MSL_START_TR1_NAMESPACE


template <typename T>
struct hash
	: _STD::unary_function<T, _CSTD::size_t>
{
	_CSTD::size_t operator()(const T& key) const
		{return static_cast<_CSTD::size_t>(key);}
};

template <class T>
struct hash<Metrowerks::move_ptr<T> >
  : _STD::unary_function<Metrowerks::move_ptr<T>, _CSTD::size_t>
{
  _CSTD::size_t operator()(const Metrowerks::move_ptr<T>& key) const
		{return reinterpret_cast<_CSTD::size_t>(key.get());}
};

_MSL_END_TR1_NAMESPACE

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#ifdef __MWERKS__
#pragma options align=reset
#endif

#endif // RC_INVOKED

#endif  // _HASH_FUN

// hh 991120 Recreated
// hh 001011 ifdef'd out typename<> for gcc
// hh 010402 Removed 68K CMF support
// hh 020703 Changed const char* specialization to a T* specializaton
// hh 020703 Added long long and floating point specializations
// hh 020703 Generalized string specialization
// JWW 030224 Changed __MSL_LONGLONG_SUPPORT__ flag into the new more configurable _MSL_LONGLONG
// SS 080612 Moved Metrowerks hash to functional
